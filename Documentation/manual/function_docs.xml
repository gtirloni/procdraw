<function-docs>
    <function-doc name="*">
        <syntax>(* ...)</syntax>
        <description>
            <p>Returns the product of all of its arguments.</p>
        </description>
        <examples>
            <ex expr="(*)" value="1"/>
            <ex expr="(* 0)" value="0"/>
            <ex expr="(* 2)" value="2"/>
            <ex expr="(* 2 3)" value="6"/>
            <ex expr="(* 2 3 4)" value="24"/>
        </examples>
        <foo/>
    </function-doc>
    <function-doc name="+">
        <syntax>(+ ...)</syntax>
        <description>
            <p>Returns the sum of all of its arguments.</p>
        </description>
        <examples>
            <ex expr="(+)" value="0"/>
            <ex expr="(+ 0)" value="0"/>
            <ex expr="(+ 2)" value="2"/>
            <ex expr="(+ 2 3)" value="5"/>
            <ex expr="(+ 2 3 4)" value="9"/>
        </examples>
    </function-doc>
    <function-doc name="-">
        <syntax>(- number ...)</syntax>
        <description>
            <p>When called with one argument, returns the additive inverse (zero minus the number). When called with more than one argument, subtracts each of the arguments after the first argument from the first argument and returns the result.</p>
        </description>
        <examples>
            <ex expr="(- 0)" value="0"/>
            <ex expr="(- 2)" value="-2"/>
            <ex expr="(- -3)" value="3"/>
            <ex expr="(- 5 2)" value="3"/>
            <ex expr="(- 5 2 7)" value="-4"/>
        </examples>
    </function-doc>
<!--
    <function-doc name="/">
        <syntax>(/ number ...)</syntax>
        <description>
            <p>When called with one argument, returns the reciprocal. When called with more than one argument, returns the first divided by the others.</p>
        </description>
        <examples>
            <ex expr="(/ 2)" value="0.5"/>
            <ex expr="(/ 0)" value="inf"/>
            <ex expr="(/ 8 5)" value="1.6"/>
            <ex expr="(/ 360 4 3)" value="30"/>
        </examples>
    </function-doc>
    <function-doc name="clear">
        <syntax>(clear dict)</syntax>
        <description>
            <p>Removes all the associations from the dictionary <param>dict</param>.</p>
        </description>
        <examples>
            <ex expr="(setq d (make-dict))" value="&lt;Dictionary>"/>
            <ex expr="(put 'key1 42 d)" value="42"/>
            <ex expr="(keys d)" value="(key1)"/>
            <ex expr="(clear d)" value="&lt;Dictionary>"/>
            <ex expr="(keys d)" value="nil"/>
        </examples>
    </function-doc>
    <function-doc name="cons">
        <syntax>(cons obj1 obj2)</syntax>
        <description>
            <p>Constructs a new cons cell with car <param>obj1</param> and cdr <param>obj2</param>.</p>
        </description>
        <examples>
            <ex expr="(cons 'a 'b)" value="(a . b)"/>
            <ex expr="(cons 'a nil)" value="(a)"/>
            <ex expr="(cons 'a '(b c d))" value="(a b c d)"/>
        </examples>
    </function-doc>
    <function-doc name="eq">
        <syntax>(eq x y)</syntax>
        <description>
            <p>Compares objects <param>x</param> and <param>y</param> for equality. Returns true in the following cases:</p>
            <ul>
                <li><param>x</param> and <param>y</param> are numbers and have the same value</li>
                <li><param>x</param> and <param>y</param> are strings and have the same contents</li>
                <li><param>x</param> and <param>y</param> are the same object</li>
            </ul>
            <p>Returns false otherwise.</p>
        </description>
        <examples>
            <ex expr="(eq 42 42)" value="true"/>
            <ex expr="(eq 42 1)" value="false"/>
            <ex expr="(eq &quot;hello&quot; &quot;hello&quot;)" value="true"/>
            <ex expr="(eq &quot;hello&quot; &quot;world&quot;)" value="false"/>
            <ex expr="(eq 'foo 'foo)" value="true"/>
            <ex expr="(eq '(a b) '(a b))" value="false"/>
            <ex expr="(eq nil nil)" value="true"/>
        </examples>
    </function-doc>
    <function-doc name="functionp">
        <syntax>(functionp obj)</syntax>
        <description>
            <p>Tests if <param>obj</param> is a function; returns true if it is, and false otherwise.</p>
        </description>
        <examples>
            <ex expr="(functionp nil)" value="false"/>
            <ex expr="(functionp '(a))" value="false"/>
            <ex expr="(functionp (lambda () 1))" value="true"/>
            <ex expr="(functionp functionp)" value="true"/>
        </examples>
    </function-doc>
    <function-doc name="get">
        <syntax>(get key dict)</syntax>
        <description>
            <p>Returns the value associated to the given <param>key</param> in the dictionary <param>dict</param>. Returns nil if the key is not found.</p>
        </description>
        <examples>
            <ex expr="(setq d (make-dict))" value="&lt;Dictionary>"/>
            <ex expr="(put 'key1 42 d)" value="42"/>
            <ex expr="(put 'key2 10 d)" value="10"/>
            <ex expr="(get 'key1 d)" value="42"/>
            <ex expr="(get 'key2 d)" value="10"/>
        </examples>
    </function-doc>
    <function-doc name="keys">
        <syntax>(keys dict)</syntax>
        <description>
            <p>Returns a list of the keys in the dictionary <param>dict</param>.</p>
        </description>
        <examples>
            <ex expr="(setq d (make-dict))" value="&lt;Dictionary>"/>
            <ex expr="(keys d)" value="nil"/>
            <ex expr="(put 'key1 42 d)" value="42"/>
            <ex expr="(keys d)" value="(key1)"/>
        </examples>
    </function-doc>
    <function-doc name="make-dict">
        <syntax>(make-dict)</syntax>
        <description>
            <p>Makes a new dictionary.</p>
        </description>
        <examples>
            <ex expr="(setq d (make-dict))" value="&lt;Dictionary>"/>
            <ex expr="(put 'key1 42 d)" value="42"/>
            <ex expr="(put 'key2 10 d)" value="10"/>
            <ex expr="(get 'key1 d)" value="42"/>
            <ex expr="(get 'key2 d)" value="10"/>
        </examples>
    </function-doc>
    <function-doc name="memb">
        <syntax>(memb obj list)</syntax>
        <description>
            <p>Searches <param>list</param> for a member eq to <param>obj</param>; returns true if one is found, and false if not.</p>
        </description>
        <examples>
            <ex expr="(memb nil nil)" value="false"/>
            <ex expr="(memb 'a nil)" value="false"/>
            <ex expr="(memb 'a '(b))" value="false"/>
            <ex expr="(memb 'a '(a))" value="true"/>
            <ex expr="(memb 'a '(a b))" value="true"/>
            <ex expr="(memb 'a '(b a))" value="true"/>
        </examples>
    </function-doc>
    <function-doc name="put">
        <syntax>(put key value dict)</syntax>
        <description>
            <p>Stores <param>value</param> as associated to the given <param>key</param> in the dictionary <param>dict</param>. Returns <param>value</param>.</p>
        </description>
        <examples>
            <ex expr="(setq d (make-dict))" value="&lt;Dictionary>"/>
            <ex expr="(put 'key1 42 d)" value="42"/>
            <ex expr="(put 'key2 10 d)" value="10"/>
            <ex expr="(get 'key1 d)" value="42"/>
            <ex expr="(get 'key2 d)" value="10"/>
        </examples>
    </function-doc>
-->
</function-docs>
